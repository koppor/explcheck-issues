name: Generate GitHub page
on:
  push:
    branches:
      - main
  pull_request:
  schedule:
    - cron: '12 2-23/3 * * *'
  workflow_dispatch:

concurrency:
  group: "${{ github.workflow }}-${{ github.head_ref || github.ref }}"
  cancel-in-progress: true

jobs:
  check-and-publish:
    permissions:
      contents: write
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5
        with:
          submodules: true

      - uses: actions/setup-node@v6
        with:
          node-version: 20
          cache: 'npm'
          cache-dependency-path: |
              pages/main/package-lock.json
              pages/file/package-lock.json
      - run: npm ci
        working-directory: pages/main
      - run: npm ci
        working-directory: pages/file

      - name: Install sponge
        uses: awalsh128/cache-apt-pkgs-action@latest
        with:
          packages: moreutils
          version: 1.0

      - name: Get latest TeX Live revision
        id: mirrors
        run: |
          wget https://zauguin.github.io/texlive-mirrors/mirrors.json
          REVISION=$(jq '.. | .revision? // empty' mirrors.json | sort -nr | head -n1)
          echo "revision=$REVISION" >> $GITHUB_ENV
          echo "Latest revision: $REVISION"

      - name: Cache TeX Files
        id: cache-tex
        uses: actions/cache@v4
        with:
          path: /tmp/texlive
          key: texlive-${{ env.revision }}

      - name: Extract TeX files from TeX Live
        if: steps.cache-tex.outputs.cache-hit != 'true'
        run: |
          # Create and start the container
          echo "docker run..."
          CONTAINER_ID=$(docker run -d registry.gitlab.com/islandoftex/images/texlive:latest sleep infinity)

          # Select mirror with latest updates
          echo "docker exec..."
          MIRROR=$(wget -qO- https://zauguin.github.io/texlive-mirrors/us | head -n1)
          docker exec "$CONTAINER_ID" tlmgr option repository "$MIRROR"

          # Update TeX Live
          echo "tlmgr update..."
          docker exec "$CONTAINER_ID" tlmgr update --self
          docker exec "$CONTAINER_ID" tlmgr update --all

          # Find all .tex, .sty, .cls, and .opt files
          echo "find..."
          FILES=$(docker exec "$CONTAINER_ID" find /usr/local/texlive -type f \( -name "*.tex" -o -name "*.sty" -o -name "*.cls" -o -name "*.opt" \))

          # Copy each file while preserving structure
          echo "docker cp..."
          for FILE in $FILES; do
            TARGET_PATH="/tmp/texlive${FILE%/*}"  # Extract directory structure
            mkdir -p "$TARGET_PATH"        # Ensure the target directory exists
            docker cp "$CONTAINER_ID:$FILE" "$TARGET_PATH/"
          done

          # Clean up
          echo "docker rm..."
          docker rm -f $CONTAINER_ID

      - name: Get expltools Docker Image Digest
        id: expltools_image_digest
        run: |
          DIGEST=$(docker manifest inspect ghcr.io/witiko/expltools/explcheck | grep -m1 'digest' | awk -F '"' '{print $4}')
          echo "EXPLTOOLS_SHA==$DIGEST" >> $GITHUB_ENV

      - name: Get workflow file commit SHA
        run: echo "WORKFLOW_SHA=$(git rev-parse HEAD:.github/workflows/generate-page.yml)" >> $GITHUB_ENV

      - name: Cache Errors
        id: cache-errors
        uses: actions/cache@v4
        with:
          path: /tmp/errors
          # We retrigger at a change of the workflow as this is an indication that the parameters for expltools chanbged
          key: errors-${{ env.revision }}-${{ env.EXPLTOOLS_SHA }}-${{ env.WORKFLOW_SHA }}

      - uses: actions/setup-go@v6
        if: steps.cache-errors.outputs.cache-hit != 'true'
        with:
          go-version: 'stable'
      - run: go install github.com/reviewdog/errorformat/cmd/errorformat@latest
        if: steps.cache-errors.outputs.cache-hit != 'true'

      - name: explcheck (TeX Live) | fresh
        if: steps.cache-errors.outputs.cache-hit != 'true'
        run: |
          set -e

          timeout 50m bash -c '
            # Sort files, so that files from the same directory that can be grouped by explcheck are listed together.
            find /tmp/texlive -type f | perl -pe '"'"'print tr{/}{}, "\t"'"'"' | LC_ALL=C sort -k1,1n -k2 | cut -f2- | sponge /tmp/texlive/files.txt
            docker run --rm -v "/tmp/texlive:/tmp/texlive" ghcr.io/witiko/expltools/explcheck \
              --porcelain \
              --config-file=/opt/expltools/.explcheckrc \
              --files-from=/tmp/texlive/files.txt \
              --error-format="%f:%l:%c:%e:%k: %t%n %m" \
              | sponge -a errors.txt
          ' || echo "Process terminated after 50 minutes."

          errorformat -w jsonl '%f:%l:%c:%e:%k: %t%n %m' < errors.txt > errors.list

          jq -s . < errors.list > errors.json

          mkdir /tmp/errors
          cp errors.* /tmp/errors/

      - name: explcheck (TeX Live) | cache
        if: steps.cache-errors.outputs.cache-hit == 'true'
        run: cp /tmp/errors/errors.* .

      - name: debug
        run: |
          head -c 1024 errors.*

          echo "---"

          tail -c 1024 errors.*

      - name: Create index.html for all error files
        run: scripts/create-dirs-for-files.py
        
      - name: Fill node_modules
        run: |
          mkdir -p publish/node_modules
          # inspired by https://stackoverflow.com/a/52408677/873282
          rsync -ah --include='*/' --include='*min*' --include='*/dist/***' --include='*/min/***' --exclude='*' pages/main/node_modules/ publish/node_modules/
          rsync -ah --include='*/' --include='*min*' --include='*/dist/***' --include='*/min/***' --exclude='*' pages/file/node_modules/ publish/node_modules/

      - name: Make latex.json available
        run: cp 3rd-party/madoko/styles/lang/latex.json publish/
      
      - name: Create index.html files for each folder
        run: |
          mv pages/main/index.html publish/
          cd publish
          ../scripts/create-index-html.sh

      - name: Create errors-summarized.json
        run: |
          # create errors-summarized.json
          mv errors.json publish/
          cd publish
          ../scripts/create-errors-summarized.py
          rm errors.json
          jq -c . errors-summarized.json | sponge errors-summarized.json

      - name: Create 404.html
        run: cp pages/404.html publish/

      - name: Publish errors.txt
        run: |
          bzip2 -k errors.txt
          mv errors.txt.bz2 publish/

      - name: debug
        run: |
          head -c 1024 publish/errors-summarized.json

          echo "..."

          tail -c 1024 publish/errors-summarized.json

      - name: Deploy
        uses: peaceiris/actions-gh-pages@v4
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./publish
          force_orphan: true
