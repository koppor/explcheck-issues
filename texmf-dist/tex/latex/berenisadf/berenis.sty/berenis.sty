%%
%% This is file `berenis.sty',
%% generated with the docstrip utility.
%%
%% The original source files were:
%%
%% berenisadf.dtx  (with options: `sty')
%% 
%% -------------------------------------------------
%% Copyright (C) 2010-2024 Clea F. Rees.
%% 
%% This work may be distributed and/or modified under the
%% conditions of the LaTeX Project Public License, either version 1.3c
%% of this license or (at your option) any later version.
%% The latest version of this license is in
%%   https://www.latex-project.org/lppl.txt
%% and version 1.3c or later is part of all distributions of LaTeX
%% version 2008-05-04 or later.
%% 
%% This work has the LPPL maintenance status `maintained'.
%% 
%% The Current Maintainer of this work is Clea F. Rees.
%% 
%% This file may only be distributed together with a copy of the package
%% berenisadf. You may however distribute the package berenisadf without
%% such generated files.
%% 
%% This work consists of all files listed in manifest.txt.
%% -------------------------------------------------
\NeedsTeXFormat{LaTeX2e}
\RequirePackage{svn-prov}
\ProvidesPackageSVN[berenis.sty]{$Id: berenisadf.dtx 10366 2024-09-18 14:25:21Z cfrees $}[v2.1 \revinfo]
\DefineFileInfoSVN[berenis]
\RequirePackage{nfssext-cfr}[2024/01/01]
\ExplSyntaxOn
\msg_new:nnn { berenis } { unknown-choice }
{ % name of choice; valid choices; invalid choice given
  berenis ~::~#1:~\msg_line_context:~#3~is~not~a~supported~font~encoding.~
  Valid~choices~are~#2.~
  Please~see~documentation~for~details.
}
\msg_new:nnn { berenis } { unavailable }% what; substitute
{
  berenis ~::~#1:~\msg_line_context:~#1~unavailable. ~
  #2~used~instead.
}
\keys_define:nn { berenis }
{
  enc .choice:,
  enc .choices:nn = { ly1, LY1, t1, T1 }
  {
    \int_case:nn { \l_keys_choice_int }
    {
      { 1 } { \tl_gset:Nn \g__berenis_enc_tl { LY1 } }
      { 2 } { \tl_gset:Nn \g__berenis_enc_tl { LY1 } }
      { 3 } { \tl_gset:Nn \g__berenis_enc_tl { T1 } }
      { 4 } { \tl_gset:Nn \g__berenis_enc_tl { T1 } }
    }
  },
  enc / unknown .code:n = {
    \msg_error:nneee { berenis } { unknown-choice }
    { enc }
    { ly1 , LY1 , t1, T1 }
    { \exp_not:n {#1} }
  },
  enc .initial:n = ly1,
  lig .bool_gset:N = \g__berenis_lig_bool,
  lig .default:n = true,
  lig .initial:n = false,
  lf .bool_gset_inverse:N = \g__berenis_osf_bool,
  lf .default:n = true,
  lining .bool_gset_inverse:N = \g__berenis_osf_bool,
  lining .default:n = true,
  lm .bool_gset:N = \g__berenis_lm_bool,
  lm .default:n = true,
  lm .initial:n = true,
  osf .bool_gset:N = \g__berenis_osf_bool,
  osf .default:n = true,
  osf .initial:n = true,
  prop .bool_gset:N = \g__berenis_prop_bool,
  prop .default:n = true,
  prop .initial:n = true,
  scale .tl_gset:N = \ybd@scale,
  scale .initial:V = \@empty,
  tab .bool_gset_inverse:N = \g__berenis_prop_bool,
  tab .default:n = true,
}
\ProcessKeyOptions[berenis]
\bool_if:NT \g__berenis_lig_bool
{
  \tl_if_eq:NnF \g__berenis_enc_tl { LY1 }
  {
    \PackageWarning { berenis } {
      Setting ~ font ~ encoding ~ to ~ LY1 ~ to ~ accommodate ~ ligatures
    }
    \tl_gset:Nn \g__berenis_enc_tl { LY1 }
  }
}
\tl_if_eq:NnT \g__berenis_enc_tl { LY1 }
{
  \bool_if:NF \g__berenis_lm_bool
  {
    \PackageWarning{berenis.sty}
    {
      Default ~ sf ~ and ~ tt ~ families ~ will ~ not\MessageBreak
      be ~ changed ~ to ~ Latin ~ Modern.\MessageBreak
      Since ~ Computer ~ Modern ~ does ~ not ~ support ~ LY1,\MessageBreak
      either ~ use ~ enc=t1 ~ to ~ use ~ T1 ~ or ~ set ~\MessageBreak
      suitable ~ defaults ~ for ~ sans ~ (`sf') ~ and ~\MessageBreak
      typewriter ~ (`tt') ~ yourself.\MessageBreak
    }
  }
}
\tl_new:N \g__berenis_rm_tl
\tl_new:N \g__berenis_rm_subst_tl
\tl_gset:Nn \g__berenis_rm_tl {ybd}
\bool_if:NT \g__berenis_prop_bool
{
  \tl_gput_right:Nn \g__berenis_rm_tl {2}
}
\bool_if:NT \g__berenis_osf_bool
{
  \tl_gput_right:Nn \g__berenis_rm_tl {j}
}
\tl_gset_eq:NN \g__berenis_rm_subst_tl \g__berenis_rm_tl
\bool_if:NT \g__berenis_lig_bool
{
  \tl_gput_right:Nn \g__berenis_rm_tl {w}
}
\renewcommand{\rmdefault}{\g__berenis_rm_tl}
\RequirePackage[\g__berenis_enc_tl]{fontenc}
\tl_if_eq:NnT \g__berenis_enc_tl { LY1 }
{
  \DeclareTextCompositeCommand{\^}{LY1}{W}{
    \char9
  }
  \DeclareTextCompositeCommand{\^}{LY1}{w}{
    \char3
  }
  \DeclareTextCompositeCommand{\^}{LY1}{Y}{
    \char10
  }
  \DeclareTextCompositeCommand{\^}{LY1}{y}{
    \char13
  }
}
\IfFormatAtLeastTF {2020-02-02}{%
  \DeclareEncodingSubset{TS1}{ybd}{1}%
  \DeclareEncodingSubset{TS1}{ybd2}{1}%
  \DeclareEncodingSubset{TS1}{ybd2j}{1}%
  \DeclareEncodingSubset{TS1}{ybdj}{1}%
  \DeclareEncodingSubset{TS1}{ybd0}{1}%
  \DeclareEncodingSubset{TS1}{ybd1}{1}%
  \DeclareEncodingSubset{TS1}{ybdw}{1}%
  \DeclareEncodingSubset{TS1}{ybd2w}{1}%
  \DeclareEncodingSubset{TS1}{ybd2jw}{1}%
  \DeclareEncodingSubset{TS1}{ybdjw}{1}%
}{
  \RequirePackage{textcomp}
}
\UndeclareTextCommand{\textperthousand}{T1}
\bool_if:NT \g__berenis_lm_bool
{
  \renewcommand{\sfdefault}{lmss}
  \renewcommand{\ttdefault}{lmtt}
}
\cs_new_nopar:Npn \zeroslash
{
  \tl_if_eq:NnTF \g__berenis_enc_tl { LY1 }
  {
    \setbox0\hbox{\char184}%
    \setbox1\hbox{\char24}%
    \ifnum\wd0=\wd1 \char48
      \msg_warning:nnnn { berenis } { unavailable }
      { slashed ~ zero } { zero }
      \else
        \ifnum\wd0=0 \char48
          \msg_warning:nnnn { berenis } { unavailable }
          { slashed ~ zero } { zero }
        \else\char184
      \fi
    \fi
  } {
    \char48
    \msg_warning:nnnn { berenis } { unavailable }
    { slashed ~ zero } { zero }
  }
}
\ExplSyntaxOff
%% end berenis.sty
\endinput
%%
%% End of file `berenis.sty'.
