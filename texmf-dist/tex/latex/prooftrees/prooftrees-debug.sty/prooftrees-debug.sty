%%
%% This is file `prooftrees-debug.sty',
%% generated with the docstrip utility.
%%
%% The original source files were:
%%
%% prooftrees.dtx  (with options: `sty,debug,tag')
%% -------------------------------------------------
%% Copyright (C) 2016-2025 Clea F. Rees.
%% 
%% This work may be distributed and/or modified under the
%% conditions of the LaTeX Project Public License, either version 1.3c
%% of this license or (at your option) any later version.
%% The latest version of this license is in
%%   https://www.latex-project.org/lppl.txt
%% and version 1.3c or later is part of all distributions of LaTeX
%% version 2008-05-04 or later.
%% 
%% This work has the LPPL maintenance status `maintained'.
%% 
%% The Current Maintainer of this work is Clea F. Rees.
%% 
%% This file may only be distributed together with a copy of the package
%% prooftrees. You may however distribute the package prooftrees without
%% such generated files.
%% 
%% This work consists of all files listed in manifest.txt.
%% -------------------------------------------------
\NeedsTeXFormat{LaTeX2e}
\RequirePackage{svn-prov}
\ProvidesPackageSVN[\filebase-debug.sty]{$Id: prooftrees.dtx 11204 2025-09-04 03:23:15Z cfrees $}[v0.9.1 \revinfo\ (debugging)]
\DefineFileInfoSVN
\forestset{%
  checked/.style={%
    proof tree after copying content={%
      if check right={%
        content+'={\ \forestregister{check with}#1},
        if tag={%
          ttoks+/.process={Rw{tag check with}{ ##1#1}},
        }{},
      }{%
        +content'={\forestregister{check with}#1\ },
        if tag={%
          +ttoks/.process={Rw{tag check with}{##1#1 }},
        }{},
      },
    },
  },
  subs/.style={%
    proof tree after copying content={%
      if subs right={%
        content+'={\ \forestregister{subs with}#1},
        if tag={%
          ttoks+/.process={Rw{tag subs with}{ ##1#1}},
        }{},
      }{%
        +content'={\forestregister{subs with}#1\ },
        if tag={%
          +ttoks/.process={Rw{tag subs with}{##1#1 }},
        }{},
      },
    },
  },
  to prove/.style={%
    for root={%
      proof tree before typesetting nodes={%
        content={#1},
        phantom=false,
        baseline,
        if line numbering={anchor=base west}{anchor=base},
        process keylist register=proof statement format,
        if={>R{tag}}{%
          debug tagging=Copying to prove to ttoks,
          ttoks/.process={ORw2{content}{tag to prove}{##2\ \ensuremath{##1}}},
          debug tagging/.option=ttoks,
          proof tree get tags={%
            debug tagging=Pick up ttoks from to prove,
            pick up tag/.option=ttoks,
          },
        }{},
      },
      proof tree before computing xy={%
        delay={%
          for children={%
            l=1.5*\baselineskip,
          },
        },
      },
    },
  },
  ttableau/.style={%
    if={>R{tag}}{%
      proof tree copy content={%
        debug tagging=Copying node contents,
        where content={}{}{%
          debug tagging=Copying node content to ttoks,
          ttoks+/.process={Ow{content}{\ensuremath{##1}}},
          debug tagging/.process={Ow{ttoks}{ttoks is ##1}},
        },
      },
      proof tree make tags={%
  debug tagging=Making tags,
        for unique={proof tree wffs}{%
          if={>OO!&{proof tree rhifo}{proof tree phantom}}
          {%
            if line numbering={%
              +ttoks={\ },
              +ttoks/.option=proof tree proof line no,
            }{},
            if justifications={%
      debug tagging={Looking for a justification ...},
              if just={}{%
                if={> O_= {!u.n children}{2}}{%
                  if={>O_={!s.just}{}}{}{just/.option=!s.just,},
          debug tagging/.process={Ow{just}{from sibling just is ##1}},
                }{%
                  temptoksa=,
                  for nodewalk={%
                    while nodewalk valid={u}{%
                      u,
                      if proof tree phantom={}{%
                        if n children=2{%
                          back=1,
                          s,
                          temptoksa/.option=just%
                        }{},
                        break,
                      }%
                    }%
                  }{},
                  just/.register=temptoksa,
          debug tagging/.process={Ow{just}{from ancestor sibling just is ##1}},
                },
              }{},
              if just={}{}{%
                ttoks+/.process={%
                  Ow{just}{\ ##1\ }%
                },
              },
      debug tagging/.process={Ow{ttoks}{ttoks is now ##1}},
            }{},
    debug tagging/.process={Ow{ttoks}{ttoks is now ##1}},
            proof tree get tags={%
      debug tagging=Get tag from wff,
      debug tagging/.process={Ow{ttoks}{ttoks is now ##1}},
              pick up tag/.option=ttoks,
            },
          }{%
            if n children=0{%
              delay={%
        debug tagging=Leaf node,
        debug tagging=Get closure status,
                if={> O_=! O_=! | {proof tree crefs}{} {!uu.proof tree close}{}}
                {%
          debug tagging=Branch is closed,
          debug tagging/.process={Ow{proof tree crefs}{crefs: ##1}},
          debug tagging/.process={Ow{!uu.proof tree close}{!uu.proof tree close: ##1}},
          debug tagging/.process={Ow{content}{content: ##1}},
                  !uu.ttoks+/.process={ORw2{content}{tag close with}{\ ##2\ ##1\ }},
          debug tagging/.process={Ow{!uu.ttoks}{!uu.ttoks is now ##1}},
                }{%
          debug tagging=Branch is open,
                },
              },
            }{},
          },
        },
      },
      tag tableau/.style={
        debug tagging=Tag tableau,
        tempdima/.max={>OOw2+d{x}{max x}{####1+####2}}{tree},
        tempdima-/.min={>OOw2+d{x}{min x}{####1+####2}}{tree},
        tempdimb/.max={>OOw2+d{y}{max y}{####1+####2}}{tree},
        tempdimb-/.min={>OOw2+d{y}{min y}{####1+####2}}{tree},
        TeX/.process={%
          RRRw3{plug}{tempdima}{tempdimb}{\prooftrees@ttableau{####1}{####2}{####3}}%
        },
      },
    }{},
  },
  alt/.style={%
    plug=alt,
    debug tagging=Using plug alt,
    pick up tag/.code={%
      \toksapp\prooftrees@tableau@toks{##1 }%
      \if@ttableau@dadfygio
        \typeout{[Tag tableau debug]:: Appending toks ##1.}%
      \fi
    },
  },
  alt,
  debug tagging/.code={},
}
\RenewDocumentEnvironment{\prooftrees@enw}{ m +b }
{%
  \global\advance\prooftrees@tableau@id by 1
  \prooftrees@ttableau@init
  \forest
    (%
      stages={%
        for root'={%
          process keylist register=default preamble,
          process keylist register=preamble,
        },
        process keylist=given options,
        process keylist=before copying content,
        process keylist=proof tree copy content,
        process keylist=proof tree after copying content,
        process keylist=proof tree before typesetting nodes,
        process keylist=before typesetting nodes,
        process keylist=proof tree ffurf,
        process keylist=proof tree symud awto,
        typeset nodes stage,
        process keylist=proof tree before packing,
        process keylist=before packing,
        pack stage,
        process keylist=proof tree before computing xy,
        process keylist=before computing xy,
        compute xy stage,
        process keylist=before making annotations,
        process keylist=proof tree creu nodiadau,
        process keylist=before annotating,
        process keylist=proof tree nodiadau,
        process keylist=proof tree before drawing tree,
        process keylist=before drawing tree,
        process keylist=before making tags,
        process keylist=proof tree make tags,
        process keylist=before getting tags,
        process keylist=proof tree get tags,
        TeX={%
          \if@ttableau@dadfygio
            \typeout{[Tag tableau debug]:: Accumulated toks:}%
            \ExpandArgs {o} \typeout{\the\prooftrees@tableau@toks}%
          \fi
        },
        tag tableau stage,
        draw tree stage,
      },
    )%
    proof tree,
    ttableau,
    #1,
    [, name=proof statement @#2]%
  \endforest
}{}
\ExplSyntaxOn
\hook_gput_code:nnn { begindocument / before } { . }
{%
  \@ifpackageloaded{memoize}{
    \tag_if_active:T
    {
      \mmzset{direct~ccmemo~input=true,}
    }
  }{
  }
  \@ifpackageloaded{memoize-ext}{
    \cs_new_eq:NN \__tableau_property_ref_orig:nn \__mmzx_property_ref_orig:nn
    \cs_new_eq:NN \c__tableau_nexpl_at_cctab  \c__mmzx_nexpl_at_cctab
  }{
    \cs_new_eq:NN \__tableau_property_ref_orig:nn \property_ref:nn
    \cctab_const:Nn \c__tableau_nexpl_at_cctab {
      \cctab_select:N \c_code_cctab
      \makeatletter
      \int_set:Nn \tex_endlinechar:D { 13 }
      \char_set_catcode_space:n      { 9 }
      \char_set_catcode_space:n      { 32 }
      \char_set_catcode_active:n     { 126 } % tilde
    }
  }
  \cs_generate_variant:Nn \__tableau_property_ref_orig:nn {ee}
  \cs_if_free:NT \toksapp
  {
    \cs_new:Npn \toksapp#1#2{#1\expandafter{\the #1#2}}
  }
}
\newcount\prooftrees@tableau@id
\newif\if@ttableau@dadfygio
\@ttableau@dadfygiofalse
\tl_new:N \l__tableau_toks_tl
\newtoks \prooftrees@tableau@toks
\cs_new_nopar:Npn \__tableau_pgftikz_tag_bbox:nnn #1#2#3
{
  \__tableau_pgftikz_tag_bbox_aux:eenn
  {
    \__tableau_property_ref_orig:ee {#1}{xpos}
  }
  {
    \__tableau_property_ref_orig:ee {#1}{ypos}
  }
  {#2}{#3}
}
\cs_generate_variant:Nn \__tableau_pgftikz_tag_bbox:nnn {enn}
\cs_new_nopar:Npn \__tableau_pgftikz_tag_bbox_aux:nnnn #1#2#3#4
{
  \dim_to_decimal_in_bp:n {#1sp}
  \c_space_tl
  \dim_to_decimal_in_bp:n {#2sp}
  \c_space_tl
  \dim_to_decimal_in_bp:n {#1sp+#3}
  \c_space_tl
  \dim_to_decimal_in_bp:n {#2sp+#4}
}
\cs_generate_variant:Nn \__tableau_pgftikz_tag_bbox_aux:nnnn {eenn}
\socket_new:nn {tableaux/tagsupport/tableau/init}{0}
\socket_new:nn {tableaux/tagsupport/tableau}{2}
\socket_new:nn {tableaux/tagsupport/tableau/mmzx}{2}
\socket_new_plug:nnn {tableaux/tagsupport/tableau/init}{tag}
{
  \socket_assign_plug:nn {tagsupport/tikz/picture/begin}{artifact}
  \socket_assign_plug:nn {tagsupport/tikz/picture/end}{artifact}
}
\socket_new_plug:nnn {tableaux/tagsupport/tableau}{alt}
{
  \tag_mc_end_push:
  \tag_struct_begin:n
  {
    tag=Figure,
    alt=\l__tableau_toks_tl
  }
  \cs_new:cpe {prooftrees@tableau@mark@pos@\the\prooftrees@tableau@id}
  {
    \__tableau_pgftikz_tag_bbox:enn {prooftrees-tableau-id\the\prooftrees@tableau@id}
    {#1}{#2}
  }
  \tag_struct_gput:ene
  {\tag_get:n {struct_num}}
  {attribute}
  {
    /O /Layout /BBox~
    [
      \use:c
      {prooftrees@tableau@mark@pos@\the\prooftrees@tableau@id}
    ]
  }
  \tag_struct_end:
  \tag_mc_begin_pop:n{}
}
\socket_new_plug:nnn {tableaux/tagsupport/tableau/mmzx}{alt}
{
  \gtoksapp\mmzCCMemo{
    \csname cctab_begin:c\endcsname {c__tableau_nexpl_at_cctab}
    \global\advance\prooftrees@tableau@id~by~1\relax
    \tex_savepos:D
    \property_record:ee {prooftrees-tableau-id\the\prooftrees@tableau@id}
    {xpos,ypos}
    \tex_savepos:D
    \tag_mc_end_push:
    \tag_struct_begin:n
  }
  \xtoksapp\mmzCCMemo{
    \c_left_brace_str
    tag=Figure,
    alt=
    \c_left_brace_str
  }
  \exp_args:NNV \gtoksapp\mmzCCMemo \l__tableau_toks_tl
  \xtoksapp\mmzCCMemo{
    \c_right_brace_str
    \c_right_brace_str
  }
  \gtoksapp\mmzCCMemo{
    \cs_new:cpe {prooftrees@tableau@mark@pos@\the\prooftrees@tableau@id}
    {
      \__tableau_pgftikz_tag_bbox:enn {prooftrees-tableau-id\the\prooftrees@tableau@id}
      {#1}{#2}
    }
    \tag_struct_gput:ene
    {\tag_get:n {struct_num}}
    {attribute}
    {
      /O /Layout /BBox~
      [
        \use:c
        {prooftrees@tableau@mark@pos@\the\prooftrees@tableau@id}
      ]
    }
    \tag_struct_end:
    \tag_mc_begin_pop:n{}
    \cctab_end:
  }
}
\cs_set_nopar:Npn \__tableau_ttableau_init:
{
  \tag_if_active:TF{
    \forestset{tag=1}
    \global\prooftrees@tableau@toks{}
    \if@ttableau@dadfygio
      \typeout{Tagging~is~active.}
      \forestset{
        debug~tagging/.code={
          \typeout{[Tag~tableau~debug]::~##1}
        },
      }
      \typeout{Assigning~and~using~tag~plug~to~socket~
        tableaux/tagsupport/tableau/init.
      }
    \fi
    \socket_assign_plug:nn {tableaux/tagsupport/tableau/init}{tag}
    \socket_use:n {tableaux/tagsupport/tableau/init}
    \def\pgfsys@begin@text{}
    \def\pgfsys@end@text{}
  }{
    \forestset{tag=0}
    \if@ttableau@dadfygio
      \typeout{Tagging~is~not~active.}
    \fi
  }
}
\cs_set_eq:NN \prooftrees@ttableau@init \__tableau_ttableau_init:
  \cs_set_nopar:Npn \__tableau_ttableau:nnn #1#2#3
{
  \tex_savepos:D
  \property_record:ee {prooftrees-tableau-id\the\prooftrees@tableau@id}
  {xpos,ypos}
  \tex_savepos:D
  \tl_set:No \l__tableau_toks_tl {\the\prooftrees@tableau@toks}
  \socket_assign_plug:nn {tableaux/tagsupport/tableau}{#1}
  \ifmemoizing
    \socket_assign_plug:nn {tableaux/tagsupport/tableau/mmzx}{#1}
  \fi
  \socket_use:nnn {tableaux/tagsupport/tableau} {#2}{#3}
  \socket_use:nnn {tableaux/tagsupport/tableau/mmzx} {#2}{#3}
}
  \cs_set_eq:NN \prooftrees@ttableau \__tableau_ttableau:nnn
\ExplSyntaxOff
\endinput
%%
%% End of file `prooftrees-debug.sty'.
